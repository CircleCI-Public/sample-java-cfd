/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.circleci.continuousfooddelivery.api;

import com.circleci.continuousfooddelivery.model.Error;
import com.circleci.continuousfooddelivery.model.InlineResponse200;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import java.util.Optional;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-01-31T03:17:46.722516300-05:00[America/New_York]")
@Validated
@RestController
@Tag(name = "image", description = "the image API")
public interface ImageApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /image : Add an image to the restaraunt
     * Creates an image. Duplicates are allowed. Returns the image id
     *
     * @param fileName (optional)
     * @return OK (status code 200)
     */
    @Operation(summary = "Add an image to the restaraunt", tags = {"image",}, responses = {@ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse200.class)))})
    @PostMapping(
            value = "/image",
            produces = {"application/json"},
            consumes = {"multipart/form-data"}
    )
    default ResponseEntity<InlineResponse200> addImage(

            @Parameter(name = "fileName", description = "") @Valid @RequestPart(value = "fileName", required = false) MultipartFile fileName) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"imageId\" : 1 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /image/{imageId} : Remove image
     * The imageId must exist
     *
     * @param imageId The imageId to delete (required)
     * @return Null response (status code 201)
     * or unexpected error (status code 200)
     */
    @Operation(summary = "Remove image", tags = {"image",}, responses = {@ApiResponse(responseCode = "201", description = "Null response"), @ApiResponse(responseCode = "200", description = "unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)))})
    @DeleteMapping(
            value = "/image/{imageId}",
            produces = {"application/json"}
    )
    default ResponseEntity<Void> deleteImage(@Parameter(name = "imageId", description = "The imageId to delete", required = true) @PathVariable("imageId") Integer imageId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /image/{imageId} : Get image
     * Returns the image as image/png
     *
     * @param imageId The imageId of the image to retrieve (required)
     * @return image (status code 200)
     */
    @Operation(summary = "Get image", tags = {"image",}, responses = {@ApiResponse(responseCode = "200", description = "image", content = @Content(mediaType = "application/json", schema = @Schema(implementation = org.springframework.core.io.Resource.class)))})
    @GetMapping(
            value = "/image/{imageId}",
            produces = {"image/png"}
    )
    default ResponseEntity<org.springframework.core.io.Resource> getImage(@Parameter(name = "imageId", description = "The imageId of the image to retrieve", required = true) @PathVariable("imageId") Integer imageId

    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
