/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.circleci.continuousfooddelivery.api;

import com.circleci.continuousfooddelivery.model.Error;
import com.circleci.continuousfooddelivery.model.Menu;
import com.circleci.continuousfooddelivery.model.MenuItem;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.Optional;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-01-31T03:17:46.722516300-05:00[America/New_York]")
@Validated
@RestController
@Tag(name = "menu", description = "the menu API")
public interface MenuApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /menu : Create a menu item
     * Creates a new item in the menu. Duplicates are allowed
     *
     * @param menuItem Item to add to the store (required)
     * @return Null response (status code 201)
     * or unexpected error (status code 200)
     */
    @Operation(summary = "Create a menu item", tags = {"menu",}, responses = {@ApiResponse(responseCode = "201", description = "Null response"), @ApiResponse(responseCode = "200", description = "unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)))})
    @PostMapping(
            value = "/menu",
            produces = {"application/json"},
            consumes = {"application/json"}
    )
    default ResponseEntity<Void> addMenuItem(

            @Parameter(name = "Item to add to the store", required = true) @Valid @RequestBody MenuItem menuItem) {

        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    /**
     * GET /menu : List all menu items
     *
     * @param limit How many items to return at one time (max 100) (optional)
     * @return A paged array of menu items (status code 200)
     * or unexpected error (status code 200)
     */
    @Operation(summary = "List all menu items", tags = {"menu",}, responses = {@ApiResponse(responseCode = "200", description = "A paged array of menu items", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Menu.class))), @ApiResponse(responseCode = "200", description = "unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)))})
    @GetMapping(
            value = "/menu",
            produces = {"application/json"}
    )
    default ResponseEntity<Menu> listMenu(@Parameter(name = "limit", description = "How many items to return at one time (max 100)") @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /menu/{itemId} : Info for a specific menu item
     *
     * @param itemId The id of the menu item to retrieve (required)
     * @return Expected response to a valid request (status code 200)
     * or unexpected error (status code 200)
     */
    @Operation(summary = "Info for a specific menu item", tags = {"menu",}, responses = {@ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = MenuItem.class))), @ApiResponse(responseCode = "200", description = "unexpected error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)))})
    @GetMapping(
            value = "/menu/{itemId}",
            produces = {"application/json"}
    )
    default ResponseEntity<MenuItem> showMenuItemById(@Parameter(name = "itemId", description = "The id of the menu item to retrieve", required = true) @PathVariable("itemId") Integer itemId

    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"imageId\" : 1, \"price\" : 6.027456183070403, \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
